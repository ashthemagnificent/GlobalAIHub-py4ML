#Define the "HealthInsurance" class
class HealthInsurance:
  def __init__(self, company_name,foundation_year, founder_name, company_slogan, num_of_employees, num_of_clients):
    self.company_name = company_name
    self.foundation_year = foundation_year
    self.founder_name = founder_name
    self.company_slogan = company_slogan
    self.num_of_employees = num_of_employees
    self.num_of_clients = num_of_clients
    #Initialize the object's attributes


    #Define the print_report method
  def print_report(self):
      print(f"""The company {self.company_name} was founded in {self.foundation_year}. 
      The founder of the company is {self.founder_name}. 
      Company slogan is {self.company_slogan}.
      Number of employees: {self.num_of_employees}
      Number of clients: {self.num_of_clients} """)

    #Define the sup_health_insurance method
  def sup_health_insurance(self, age, chronic_disease, income):
      #if-else statements to check whether person can get supplemental insurance or not
      if age>=60 and chronic_disease==True and income<6000:
        print("We are sorry! You are not eligible for suplemental health insurance.")
      elif age <60 and income >= 6000 or chronic_disease== False:
        print("Congratulations! You can get supplemental health insurance.")

    #Define the update_num_clients method
  def update_num_clients(self, new_number):
      self.num_of_clients = new_number
      print(f"The number of clients has been changed to {self.num_of_clients}!")
      #Create the object "HI_company1" with it's attributes
HI_company1 = HealthInsurance('Healthy', 2012, 'Bob Mayer', 'We care for you.', 3500, 13230)
#Use the sup_health_insurance for the new customer
HI_company1.sup_health_insurance(36, True, 6000)
#Update the number of clients
HI_company1.update_num_clients(13231)
#Call the print_report method for HI_company1
HI_company1.print_report()








#Define the "Logistics" class
class Logistics:
    #Initialize the object's attributes 
    def __init__(self,company_name, foundation_year, founder_name, company_slogan, inventory_space):
      self.company_name = company_name
      self.foundation_year = foundation_year
      self.founder_name = founder_name
      self.company_slogan = company_slogan
      self.inventory_space = inventory_space
        
    #Define the print_report method
    def print_report(self):
      print(f"""The company name is{self.company_name} and was founded in {self.foundation_year}.
      The founder of the company is {self.founder_name}. 
      Company slogan: {self.company_slogan}
      Inventory space of the company: {self.inventory_space}""")

    #Define the update_inventory_space method
    def update_inventory_space(self, new_storage_space):
      self.inventory_space = new_storage_space
      print(f"New inventory space is changed to {self.inventory_space}!")
      
     #Create the object "logistic_company1" with it's attributes
logistic_company1 = Logistics("Logcom", 1990, "Laura McCartey", "There is no place we cannot reach.", 2500)
#Update the inventory space
logistic_company1.update_inventory_space(3000)
#Call the print_report method for logistic_company1
logistic_company1.print_report()










#Define the "Trading" class
class Trading:
    #Initialize the object's attributes 
    def __init__(self,company_name, foundation_year, founder_name, company_slogan, sales, expenses, revenue):
      self.company_name = company_name
      self.foundation_year = foundation_year
      self.founder_name = founder_name
      self.company_slogan = company_slogan
      self.sales = sales
      self.expenses = expenses
      self.revenue = revenue   

    #Define the print_report method
    def print_report(self):
      print(f"""The company name is{self.company_name} and was founded in {self.foundation_year}.
      The founder of the company is {self.founder_name}. 
      Company slogan: {self.company_slogan}
      Sales: {self.sales}
      Expenses: {self.expenses}
      Revenue: {self.revenue}""")    

    #Define the update_sales_and_expenses method
    def update_sales_and_expenses(self, new_sales, new_expenses):
      self.sales += new_sales
      self.expenses += new_expenses
      print("Sales and expenses are updated!")

    #Define the calculate_revenue method
    def calculate_revenue(self):
      self.revenue = self.sales - self.expenses 
      print(f"The revenue of the company is: {self.revenue}")
      
      #Create the object "trading_company1" with it's attributes
trading_company1 = Trading("TraCom", 2005, "Chong Wu", "We revolutionize trading.", 5000, 2000, 3000)
#Update the sales and expenses
trading_company1.update_sales_and_expenses(100,50)
#Calculate the revenue
trading_company1.calculate_revenue()
#Call the print_report method for trading_company1
trading_company1.print_report()
